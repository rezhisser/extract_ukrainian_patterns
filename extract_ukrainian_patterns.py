import os
import re
import pandas as pd

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
from config_local import project_path
extensions = ['.html', '.ts']
ignore_patterns = [
    r'\bimport\b', r'\bfrom\b', r'\bexport\b', r'\bconsole\.log\b',
    r'\bselector\b', r'\bstyleUrls\b', r'\btemplateUrl\b', r'\b@.*\b',
    r'\btrue\b', r'\bfalse\b', r'\bnull\b'
]
ukrainian_pattern = re.compile(r'[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë]{2,}')
results = []

# –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä—è–¥–∫–∏
def is_technical_line(line):
    return any(re.search(pattern, line) for pattern in ignore_patterns)

# –§—É–Ω–∫—Ü—ñ—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É
def extract_ukrainian_text_and_pattern(line):
    patterns = [
        ("single_quotes", r"'([^']*[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë\'`]{2,}[^']*)'"),
        ("double_quotes", r'"([^"]*[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë\'`]{2,}[^"]*)"'),
        ("backticks", r'`([^`]*[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë\'`]{2,}[^`]*)`'),
        ("html_text", r'>\s*([–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë0-9 ,.\-:;!?()\'"]{3,})\s*<')
    ]

    for name, pattern in patterns:
        matches = re.findall(pattern, line)
        if matches:
            cleaned_results = []
            for match in matches:
                # 1. –î–µ–µ–∫—Ä–∞–Ω—É—î–º–æ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏
                text = match.replace("\\'", "'")

                # 2. –í–∏–¥–∞–ª—è—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –≤—Å—Ç–∞–≤–∫–∏ —Ç–∏–ø—É ${...}
                no_vars = re.sub(r'\${[^}]+}', '', text)

                # 3. –ó–∞–º—ñ–Ω—é—î–º–æ –ª–∞—Ç–∏–Ω—Å—å–∫–µ 'i' –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ '—ñ' –≤ –∫–∏—Ä–∏–ª–∏—á–Ω–∏—Ö —Å–ª–æ–≤–∞—Ö
                def fix_i(word):
                    if re.search(r'[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë]', word):  # —è–∫—â–æ —î —Ö–æ—á –æ–¥–Ω–∞ –∫–∏—Ä–∏–ª–∏—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞
                        return word.replace('i', '—ñ')
                    return word

                # 4. –í–∏—Ç—è–≥—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ñ—Ä–∞–∑–∏ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ fix_i
                ukrainian_chunks = re.findall(r"[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë0-9 ,.\-:;!?()']{2,}", no_vars)
                fixed = [fix_i(chunk.strip()) for chunk in ukrainian_chunks if chunk.strip()]
                cleaned_results.extend(fixed)

            if cleaned_results:
                return ' | '.join(cleaned_results), name
    return None, None


# –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ (source): –∞—Ç—Ä–∏–±—É—Ç —á–∏ —à–∞–±–ª–æ–Ω
def detect_source(line):
    if '<ng-template' in line or '</ng-template>' in line:
        return 'ng-template'
    if re.search(r'tooltip|data-tooltip|data-awesome-tooltip', line):
        return 'tooltip'
    if re.search(r'placeholder\s*=', line):
        return 'placeholder'
    if re.search(r'title\s*=', line):
        return 'title'
    return 'innerText'

# –ü–æ—à—É–∫
for root, _, files in os.walk(project_path):
    for file in files:
        if any(file.endswith(ext) for ext in extensions):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, encoding='utf-8') as f:
                    for i, line in enumerate(f, 1):
                        if '//' in line:
                            comment_index = line.find('//')
                            protocol_index = line.find('://')
                            if not (
                                    protocol_index != -1 and comment_index > protocol_index - 1 and comment_index < protocol_index + 3):
                                line = line[:comment_index]
                        if ukrainian_pattern.search(line) and not is_technical_line(line):
                            extracted, pattern = extract_ukrainian_text_and_pattern(line)
                            if extracted:
                                source = detect_source(line)
                                results.append({
                                    'Filename': filepath,
                                    'Line Number': i,
                                    'Text': extracted,
                                    'Pattern': pattern,
                                    'Source': source,
                                    'Full Line': line.strip()
                                })
            except Exception as e:
                print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ {filepath}: {e}')

# –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Å–∏
df = pd.DataFrame(results).drop_duplicates()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
from config_local import output_path
df.to_excel(output_path, index=False)
print(f'‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_path}')
